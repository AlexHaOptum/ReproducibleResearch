ggplot(imputed, aes(date, steps)) + geom_bar (stat = "identity",
color = "orange",
size = 0.5)
ggplot(imputed, aes(date, steps)) + geom_bar (stat = "identity",
color = "orange",
size = 0.5) +
labs(title = "Histogram",
x = "Date",
y = "Total number of steps")
ggplot(imputed, aes(date, steps)) + geom_bar (stat = "identity",color = "orange", size = 0.5) +
labs(title = "Histogram",x = "Date",y = "Total number of steps")
+ scale_x_continuous(name = "Date", limits = c(0,60))
ggplot(imputed, aes(date, steps)) + geom_bar (stat = "identity",color = "orange", size = 0.5) +
labs(title = "Histogram",x = "Date",y = "Total number of steps")
+ scale_x_date(name = "Date", date_breaks = "1 week")
ggplot(imputed, aes(date, steps)) + geom_bar (stat = "identity",color = "orange", size = 0.5) +
labs(title = "Histogram",x = "Date",y = "Total number of steps")
+ scale_x_date(name = "Date", date_breaks = "1 week", date_labels = "%b %d")
ggplot(imputed, aes(date, steps)) + geom_bar (stat = "identity",color = "orange", size = 0.5) +
labs(title = "Histogram",x = "Date",y = "Total number of steps")
+ scale_x_date(name = "Date", date_minor_breaks = "1 day")
imputed$date <- as.Date(imputed$date)
View(imputed)
+ scale_x_date(breaks = round(seq(min(imputed$date), max(imputed$date, by = 0.5, 1)))
ggplot(imputed, aes(date, steps)) + geom_bar (stat = "identity",color = "orange", size = 0.5) +
labs(title = "Histogram",x = "Date",y = "Total number of steps")
+ scale_x_date(breaks = round(seq(min(imputed$date), max(imputed$date, by = 0.5, 1)))
ggplot(imputed, aes(date, steps)) + geom_bar (stat = "identity",color = "orange", size = 0.5) +
labs(title = "Histogram",x = "Date",y = "Total number of steps")
+ scale_x_date(breaks = round(seq(min(imputed$date), max(imputed$date, by = 0.5, 1)))
ggplot(imputed, aes(date, steps)) + geom_bar (stat = "identity",color = "orange",fill = "orange", size = 0.5) +
labs(title = "Histogram",x = "Date",y = "Total number of steps")
+ scale_x_date(breaks = round(seq(min(imputed$date), max(imputed$date, by = 0.5, 1)))
ggplot(imputed, aes(date, steps)) + geom_bar (stat = "identity",color = "orange",fill = "orange", size = 0.5) +
labs(title = "Histogram",x = "Date",y = "Total number of steps")
+ scale_x_date(breaks = round(seq(min(imputed$date), max(imputed$date, by = 0.5, 1)))
ggplot(imputed, aes(date, steps)) + geom_bar (stat = "identity",color = "orange",fill = "black", size = 0.5) +
labs(title = "Histogram",x = "Date",y = "Total number of steps")
+ scale_x_date(breaks = round(seq(min(imputed$date), max(imputed$date, by = 0.5, 1)))
ggplot(imputed, aes(date, steps)) + geom_bar (stat = "identity",color = "orange",fill = "black", size = 0.5) +
labs(title = "Histogram",x = "Date",y = "Total number of steps")
+ scale_x_date(breaks = round(seq(min(imputed$date), max(imputed$date, by = 0.5, 1)))
ggplot(imputed, aes(date, steps)) + geom_bar (stat = "identity",color = "orange",fill = "orange", size = 0.5) +
labs(title = "Histogram",x = "Date",y = "Total number of steps")
+ scale_x_date(breaks = round(seq(min(imputed$date), max(imputed$date, by = 0.5, 1)))
ggplot(imputed, aes(date, steps))
+ geom_bar (stat = "identity",color = "orange",fill = "orange", size = 0.5)
+ labs(title = "Histogram",x = "Date",y = "Total number of steps")
+ scale_x_date(breaks = round(seq(min(imputed$date), max(imputed$date, by = 0.5, 1)))
ggplot(imputed, aes(date, steps)) + geom_bar (stat = "identity",color = "orange",fill = "orange", size = 0.5) + labs(title = "Histogram",x = "Date",y = "Total number of steps")
ggplot(imputed, aes(date, steps)) + geom_bar (stat = "identity",color = "orange",fill = "orange", size = 0.5) + labs(title = "Histogram",x = "Date",y = "Total number of steps") + scale_x_date(breaks = round(seq(min(imputed$date), max(imputed$date, by = 0.5, 1))
)
ggplot(imputed, aes(date, steps)) + geom_bar (stat = "identity",color = "orange",fill = "orange", size = 0.5) + labs(title = "Histogram",x = "Date",y = "Total number of steps") + scale_x_date(breaks = round(seq(min(imputed$date), max(imputed$date, by = 0.5, 1))
ggplot(imputed, aes(date, steps)) + geom_bar (stat = "identity",color = "orange", size = 0.5) +
labs(title = "Histogram",x = "Date",y = "Total number of steps")
+ scale_x_date(breaks = round(seq(min(imputed$date), max(imputed$date, by = 0.5, 1)))
ggplot(imputed, aes(date, steps))
+ geom_bar (stat = "identity",color = "orange", size = 0.5)
+ labs(title = "Histogram",x = "Date",y = "Total number of steps")
+ scale_x_date(breaks = round(seq(min(imputed$date), max(imputed$date, by = 0.5, 1)))
ggplot(imputed, aes(date, steps)) + geom_bar (stat = "identity",color = "orange", size = 0.5) + labs(title = "Histogram",x = "Date",y = "Total number of steps") + scale_x_date(breaks = round(seq(min(imputed$date), max(imputed$date, by = 0.5, 1)))
ggplot(imputed, aes(date, steps)) + geom_bar (stat = "identity",color = "orange", size = 0.5) +
labs(title = "Histogram",x = "Date",y = "Total number of steps")
+ scale_x_date(breaks = round(seq(min(imputed$date), max(imputed$date, by = 0.5),1))
ggplot(imputed, aes(date, steps)) + geom_bar (stat = "identity",color = "orange", fill = "orange", size = 0.5) +
labs(title = "Histogram",x = "Date",y = "Total number of steps")
+ scale_x_date(breaks = round(seq(min(imputed$date), max(imputed$date, by = 0.5),1))
ggplot(imputed, aes(date, steps)) + geom_bar (stat = "identity",color = "orange", fill = "orange", size = 0.5) +
labs(title = "Histogram",x = "Date",y = "Total number of steps")
+ scale_x_date(breaks = round(seq(min(imputed$date), max(imputed$date, by = 0.5),1))
require(ggplot2)
getwd()
setwd("~/Coursera/ReproducibleResearch")
data <- read.csv("activity.csv")
df <- data.frame(data)
df <- na.omit(df)
## What is mean total number of steps taken per day?
avgTotalSteps <- aggregate(df$steps, by = list(df$date), FUN = sum)
colnames(avgTotalSteps) <- c("Date","Total")
hist(avgTotalSteps$Total, xlab = "Average Total Steps", main = "Histogram")
mean(avgTotalSteps$Total)
median(avgTotalSteps$Total)
## What is the average daily activity pattern?
avgStepsPerInterval <- aggregate(df$steps, by = list(df$interval), FUN = sum)
colnames(avgStepsPerInterval) <- c("Interval", "Average")
plot(avgStepsPerInterval$Interval, avgStepsPerInterval$Average,
axes = F, type = "l", col = "orange", xlab = "Time",
ylab = "Average Number of Steps", main = "Average Daily Activity")
axis(1, at = c(0, 600, 1200, 1800, 2400), label = c("12:00 AM","6:00 AM","12:00 PM","6:00 PM","12:00 AM"))
axis(2)
avgStepsPerInterval[which.max(avgStepsPerInterval$Average),]
## Imputing missing values
dfNA <- data.frame(data)
sum(is.na(dfNA$steps))
## Strategy for filling in all missing values in dataset
avgSteps <- aggregate(df$steps, list(interval = as.numeric(as.character(df$interval))), FUN = "mean")
imputed <- data
for (i in 1:nrow(imputed)) {
if (is.na(imputed$steps[i])) {
imputed$steps[i] <- avgSteps[which(imputed$interval[i] == avgSteps$interval), ]$x
}
}
imputed$date <- as.Date(imputed$date)
gg <- ggplot(imputed, aes(date, steps))
gg <- gg + geom_bar (stat = "identity",color = "orange", fill = "orange", size = 0.5)
gg <- gg + labs(title = "Histogram",x = "Date",y = "Total number of steps")
gg <- gg + scale_x_date(breaks = round(seq(min(imputed$date), max(imputed$date, by = 0.5),1))
gg <- gg + scale_x_date(breaks = round(seq(min(imputed$date), max(imputed$date, by = 0.5),1)))
gg <- ggplot(imputed, aes(date, steps))
gg <- gg + geom_bar (stat = "identity",color = "orange", fill = "orange", size = 0.5)
gg <- gg + labs(title = "Histogram",x = "Date",y = "Total number of steps")
gg <- gg + scale_x_date(breaks = round(seq(min(imputed$date), max(imputed$date, by = 0.5),1)))
print(gg)
gg <- gg + scale_x_date(breaks = round(seq(min(imputed$date), max(imputed$date, by = 0.5),1)))
print(gg)
gg <- gg + scale_x_date(breaks = round(seq(min(imputed$date), max(imputed$date, by = 0.5),1)))
gg <- ggplot(imputed, aes(date, steps))
gg <- gg + geom_bar (stat = "identity",color = "orange", fill = "orange", size = 0.5)
gg <- gg + labs(title = "Histogram",x = "Date",y = "Total number of steps")
gg <- gg + scale_x_date(breaks = round(seq(min(imputed$date), max(imputed$date, by = 0.5),1)))
print(gg)
gg <- ggplot(imputed, aes(date, steps))
print(gg)
gg <- gg + geom_bar (stat = "identity",color = "orange", fill = "orange", size = 0.5)
print(gg)
gg <- gg + labs(title = "Histogram",x = "Date",y = "Total number of steps")
print(gg)
gg <- gg + scale_x_date(breaks = round(seq(min(imputed$date), max(imputed$date, by = 0.5),1)))
print(gg)
gg <- ggplot(imputed, aes(date, steps))
gg <- gg + geom_bar (stat = "identity",color = "orange", fill = "orange", size = 0.5)
gg <- gg + labs(title = "Histogram",x = "Date",y = "Total number of steps")
print(gg)
gg <- gg + geom_bar (stat = "identity",color = "orange", fill = "orange", size = 0.5, position = position_dodge(width = 0.25))
gg <- gg + labs(title = "Histogram",x = "Date",y = "Total number of steps")
print(gg)
mean(imputed$steps)
filledTotalSteps <- aggregate(imputed$steps, list (Date = imputed$date), FUN = "sum")$date
filledTotalSteps <- aggregate(imputed$steps, list (Date = imputed$date), FUN = "sum")$x
mean(filledTotalSteps)
median(filledTotalSteps)
dfDay <- imputed
?weekday()
?weekend()
?weekdays()
dfDay["DayOfWeek"] <-
for (i in 1:nrow(dfDay)) {
if(weekdays(dfDay$date) == "Saturday" | weekdays(dfDay$date) == "Sunday") {
dfDay$DayOfWeek[i] <- "Weekend"
}
else {
dfDay$DayOfWeek[i] <- "Weekday"
}
}
View(dfDay)
warnings()
dfDay["DayOfWeek"] <-
for (i in 1:nrow(dfDay)) {
if(weekdays(dfDay$date) == "Saturday" || weekdays(dfDay$date) == "Sunday") {
dfDay$DayOfWeek[i] <- "Weekend"
}
else {
dfDay$DayOfWeek[i] <- "Weekday"
}
}
dfDay["DayOfWeek"] <-
for (i in 1:nrow(dfDay)) {
if(weekdays(dfDay$date[i]) == "Saturday" || weekdays(dfDay$date[i]) == "Sunday") {
dfDay$DayOfWeek[i] <- "Weekend"
}
else {
dfDay$DayOfWeek[i] <- "Weekday"
}
}
View(dfDay)
dfDay["DayOfWeek"] <-
for (i in 1:nrow(dfDay)) {
if(weekdays(dfDay$date[i]) == "Saturday" || weekdays(dfDay$date[i]) == "Sunday") {
dfDay$DayOfWeek[i] <- "Weekend"
}
else {
dfDay$DayOfWeek[i] <- "Weekday"
}
}
dfDay <- dfDay%>%
mutate(typeOfDay = ifelse(weekdays(dfDay$date) == "Saturday" | weekdays(dfDay$date) == "Sunday", "Weekend", "Weekday"))
mutate(typeOfDay = ifelse(weekdays(dfDay$date) == "Saturday" | weekdays(dfDay$date) == "Sunday", "Weekend", "Weekday"))
dfDay <- dfDay %>%
mutate(typeOfDay = ifelse(weekdays(dfDay$date) == "Saturday" | weekdays(dfDay$date) == "Sunday", "Weekend", "Weekday"))
head(dfDay)
dfDay <- dfDay %>%
mutate(typeOfDay = ifelse(weekdays(dfDay$date) == "Saturday" | weekdays(dfDay$date) == "Sunday", "Weekend", "Weekday"))
library(magrittr)
dfDay <- dfDay %>%
mutate(typeOfDay = ifelse(weekdays(dfDay$date) == "Saturday" | weekdays(dfDay$date) == "Sunday", "Weekend", "Weekday"))
head(dfDay)
library(dplyr)
dfDay <- dfDay %>%
mutate(typeOfDay = ifelse(weekdays(dfDay$date) == "Saturday" | weekdays(dfDay$date) == "Sunday", "Weekend", "Weekday"))
head(dfDay)
View(dfDay)
dayVsEnd <- dfDay(group_by(interval, typeOfDay))
dayVsEnd <- dfDay%>%
group_by(interval, typeOfDay) %>%
summarise(avg_steps2 = mean(steps, na.rm = TRUE))
View(dayVsEnd)
dayVsEndgg <- ggplot(dayVsEnd, aes(x =interval , y=avg_steps2, color=typeOfDay)) +
geom_line() +
labs(title = "Avg Daily Steps", x = "Interval", y = "No. of Steps")
print(dayVsEndgg)
require(ggplot2)
library(magrittr)
library(dplyr)
getwd()
setwd("~/Coursera/ReproducibleResearch")
data <- read.csv("activity.csv")
dfNoNA <- data.frame(data)
dfNoNA <- na.omit(df)
## What is mean total number of steps taken per day?
avgTotalSteps <- aggregate(dfNoNA$steps, by = list(dfNoNA$date), FUN = sum)
colnames(avgTotalSteps) <- c("Date","Total")
hist(avgTotalSteps$Total, xlab = "Average Total Steps", main = "Histogram")
mean(avgTotalSteps$Total)
median(avgTotalSteps$Total)
## What is the average daily activity pattern?
avgStepsPerInterval <- aggregate(dfNoNA$steps, by = list(dfNoNA$interval), FUN = sum)
colnames(avgStepsPerInterval) <- c("Interval", "Average")
plot(avgStepsPerInterval$Interval, avgStepsPerInterval$Average,
axes = F, type = "l", col = "orange", xlab = "Time",
ylab = "Average Number of Steps", main = "Average Daily Activity")
axis(1, at = c(0, 600, 1200, 1800, 2400), label = c("12:00 AM","6:00 AM","12:00 PM","6:00 PM","12:00 AM"))
axis(2)
avgStepsPerInterval[which.max(avgStepsPerInterval$Average),]
## Imputing missing values
dfNA <- data.frame(data)
sum(is.na(dfNA$steps))
## Strategy for filling in all missing values in dataset
avgSteps <- aggregate(df$steps, list(interval = as.numeric(as.character(df$interval))), FUN = "mean")
imputed <- data
for (i in 1:nrow(imputed)) {
if (is.na(imputed$steps[i])) {
imputed$steps[i] <- avgSteps[which(imputed$interval[i] == avgSteps$interval), ]$x
}
}
imputed$date <- as.Date(imputed$date)
gg <- ggplot(imputed, aes(date, steps))
gg <- gg + geom_bar (stat = "identity",color = "orange", fill = "orange", size = 0.5, position = position_dodge(width = 0.25))
gg <- gg + labs(title = "Histogram",x = "Date",y = "Total number of steps")
print(gg)
filledTotalSteps <- aggregate(imputed$steps, list (Date = imputed$date), FUN = "sum")$x
mean(filledTotalSteps)
median(filledTotalSteps)
## Median is increased
## Are there differences in activity patterns between weekdays and weekends?
dfDay <- imputed
dfDay <- dfDay %>%
mutate(typeOfDay = ifelse(weekdays(dfDay$date) == "Saturday" |
weekdays(dfDay$date) == "Sunday", "Weekend", "Weekday"))
head(dfDay)
dayVsEnd <- dfDay%>%
group_by(interval, typeOfDay) %>%
summarise(avg_steps2 = mean(steps, na.rm = TRUE))
dayVsEndgg <- ggplot(dayVsEnd, aes(x =interval , y=avg_steps2, color=typeOfDay)) +
geom_line() +
labs(title = "Avg Daily Steps", x = "Interval", y = "No. of Steps")
print(dayVsEndgg)
data <- read.csv("activity.csv")
dfNoNA <- data.frame(data)
dfNoNA <- na.omit(df)
avgTotalSteps <- aggregate(dfNoNA$steps, by = list(dfNoNA$date), FUN = sum)
dfNoNA <- na.omit(df)
## What is mean total number of steps taken per day?
avgTotalSteps <- aggregate(dfNoNA$steps, by = list(dfNoNA$date), FUN = sum)
colnames(avgTotalSteps) <- c("Date","Total")
require(ggplot2)
library(magrittr)
library(dplyr)
getwd()
setwd("~/Coursera/ReproducibleResearch")
data <- read.csv("activity.csv")
df <- data.frame(data)
df <- na.omit(df)
## What is mean total number of steps taken per day?
avgTotalSteps <- aggregate(df$steps, by = list(df$date), FUN = sum)
colnames(avgTotalSteps) <- c("Date","Total")
hist(avgTotalSteps$Total, xlab = "Average Total Steps", main = "Histogram")
mean(avgTotalSteps$Total)
median(avgTotalSteps$Total)
## What is the average daily activity pattern?
avgStepsPerInterval <- aggregate(df$steps, by = list(df$interval), FUN = sum)
colnames(avgStepsPerInterval) <- c("Interval", "Average")
plot(avgStepsPerInterval$Interval, avgStepsPerInterval$Average,
axes = F, type = "l", col = "orange", xlab = "Time",
ylab = "Average Number of Steps", main = "Average Daily Activity")
axis(1, at = c(0, 600, 1200, 1800, 2400), label = c("12:00 AM","6:00 AM","12:00 PM","6:00 PM","12:00 AM"))
axis(2)
avgStepsPerInterval[which.max(avgStepsPerInterval$Average),]
## Imputing missing values
dfNA <- data.frame(data)
sum(is.na(dfNA$steps))
## Strategy for filling in all missing values in dataset
avgSteps <- aggregate(df$steps, list(interval = as.numeric(as.character(df$interval))), FUN = "mean")
imputed <- data
for (i in 1:nrow(imputed)) {
if (is.na(imputed$steps[i])) {
imputed$steps[i] <- avgSteps[which(imputed$interval[i] == avgSteps$interval), ]$x
}
}
imputed$date <- as.Date(imputed$date)
gg <- ggplot(imputed, aes(date, steps))
gg <- gg + geom_bar (stat = "identity",color = "orange", fill = "orange", size = 0.5, position = position_dodge(width = 0.25))
gg <- gg + labs(title = "Histogram",x = "Date",y = "Total number of steps")
print(gg)
filledTotalSteps <- aggregate(imputed$steps, list (Date = imputed$date), FUN = "sum")$x
mean(filledTotalSteps)
median(filledTotalSteps)
## Median is increased
## Are there differences in activity patterns between weekdays and weekends?
dfDay <- imputed
dfDay <- dfDay %>%
mutate(typeOfDay = ifelse(weekdays(dfDay$date) == "Saturday" |
weekdays(dfDay$date) == "Sunday", "Weekend", "Weekday"))
head(dfDay)
dayVsEnd <- dfDay%>%
group_by(interval, typeOfDay) %>%
summarise(avg_steps2 = mean(steps, na.rm = TRUE))
dayVsEndgg <- ggplot(dayVsEnd, aes(x =interval , y=avg_steps2, color=typeOfDay)) +
geom_line() +
labs(title = "Avg Daily Steps", x = "Interval", y = "No. of Steps")
print(dayVsEndgg)
library(ggplot2)
avgTotalSteps <- aggregate(df$steps, by = list(df$date), FUN = sum)
colnames(avgTotalSteps) <- c("Date","Total")
hist(avgTotalSteps$Total, xlab = "Average Total Steps", main = "Histogram")
mean(avgTotalSteps$Total)
median(avgTotalSteps$Total)
library(knitr)
---
title: "Coursera - Reproducible Research Project 1"
author: "Alex Ha"
date: "December 29, 2016"
output: html_document
---
# Installing packages
First, installing the packages/libraries necessary to carry out the program. Also getting/setting the working directory in case it is necessary
```
library(ggplot2)
library(magrittr)
library(dplyr)
library(knitr)
getwd()
setwd("~/Coursera/ReproducibleResearch")
```
## Reading CSV file & omitting null rows
```
data <- read.csv("activity.csv")
df <- data.frame(data)
df <- na.omit(df)
```
## Question one asks: What is mean total number of steps taken per day?
Calculating the total number of steps taken per day
```
avgTotalSteps <- aggregate(df$steps, by = list(df$date), FUN = sum)
colnames(avgTotalSteps) <- c("Date","Total")
```
Make a histogram of the total number of steps taken each day
```
hist(avgTotalSteps$Total, xlab = "Average Total Steps", main = "Histogram")
```
Calculate and report the mean and median of the total number of steps taken per day
```{r echo = TRUE}
mean(avgTotalSteps$Total)
median(avgTotalSteps$Total)
```
## What is the average daily activity pattern?
```
avgStepsPerInterval <- aggregate(df$steps, by = list(df$interval), FUN = sum)
colnames(avgStepsPerInterval) <- c("Interval", "Average")
plot(avgStepsPerInterval$Interval, avgStepsPerInterval$Average,
axes = F, type = "l", col = "orange", xlab = "Time",
ylab = "Average Number of Steps", main = "Average Daily Activity")
axis(1, at = c(0, 600, 1200, 1800, 2400), label = c("12:00 AM","6:00 AM","12:00 PM","6:00 PM","12:00 AM"))
axis(2)
avgStepsPerInterval[which.max(avgStepsPerInterval$Average),]
```
## Imputing missing values
```
dfNA <- data.frame(data)
sum(is.na(dfNA$steps))
```
## Strategy for filling in all missing values in dataset
```
avgSteps <- aggregate(df$steps, list(interval = as.numeric(as.character(df$interval))), FUN = "mean")
imputed <- data
for (i in 1:nrow(imputed)) {
if (is.na(imputed$steps[i])) {
imputed$steps[i] <- avgSteps[which(imputed$interval[i] == avgSteps$interval), ]$x
}
}
imputed$date <- as.Date(imputed$date)
gg <- ggplot(imputed, aes(date, steps))
gg <- gg + geom_bar (stat = "identity",color = "orange", fill = "orange", size = 0.5, position = position_dodge(width = 0.25))
gg <- gg + labs(title = "Histogram",x = "Date",y = "Total number of steps")
print(gg)
filledTotalSteps <- aggregate(imputed$steps, list (Date = imputed$date), FUN = "sum")$x
mean(filledTotalSteps)
median(filledTotalSteps)
```
## Are there differences in activity patterns between weekdays and weekends?
```
dfDay <- imputed
dfDay <- dfDay %>%
mutate(typeOfDay = ifelse(weekdays(dfDay$date) == "Saturday" |
weekdays(dfDay$date) == "Sunday", "Weekend", "Weekday"))
head(dfDay)
dayVsEnd <- dfDay%>%
group_by(interval, typeOfDay) %>%
summarise(avg_steps2 = mean(steps, na.rm = TRUE))
dayVsEndgg <- ggplot(dayVsEnd, aes(x =interval , y=avg_steps2, color=typeOfDay)) +
geom_line() +
labs(title = "Avg Daily Steps", x = "Interval", y = "No. of Steps")
print(dayVsEndgg)
```
---
title: "Coursera - Reproducible Research Project 1"
author: "Alex Ha"
date: "December 29, 2016"
output: html_document
---
# Installing packages
First, installing the packages/libraries necessary to carry out the program. Also getting/setting the working directory in case it is necessary
```
library(ggplot2)
library(magrittr)
library(dplyr)
library(knitr)
getwd()
setwd("~/Coursera/ReproducibleResearch")
```
## Reading CSV file & omitting null rows
```
data <- read.csv("activity.csv")
df <- data.frame(data)
df <- na.omit(df)
```
## Question one asks: What is mean total number of steps taken per day?
Calculating the total number of steps taken per day
```
avgTotalSteps <- aggregate(df$steps, by = list(df$date), FUN = sum)
colnames(avgTotalSteps) <- c("Date","Total")
```
Make a histogram of the total number of steps taken each day
```
hist(avgTotalSteps$Total, xlab = "Average Total Steps", main = "Histogram")
```
Calculate and report the mean and median of the total number of steps taken per day
```{r}
mean(avgTotalSteps$Total)
median(avgTotalSteps$Total)
```
## What is the average daily activity pattern?
```
avgStepsPerInterval <- aggregate(df$steps, by = list(df$interval), FUN = sum)
colnames(avgStepsPerInterval) <- c("Interval", "Average")
plot(avgStepsPerInterval$Interval, avgStepsPerInterval$Average,
axes = F, type = "l", col = "orange", xlab = "Time",
ylab = "Average Number of Steps", main = "Average Daily Activity")
axis(1, at = c(0, 600, 1200, 1800, 2400), label = c("12:00 AM","6:00 AM","12:00 PM","6:00 PM","12:00 AM"))
axis(2)
avgStepsPerInterval[which.max(avgStepsPerInterval$Average),]
```
## Imputing missing values
```
dfNA <- data.frame(data)
sum(is.na(dfNA$steps))
```
## Strategy for filling in all missing values in dataset
```
avgSteps <- aggregate(df$steps, list(interval = as.numeric(as.character(df$interval))), FUN = "mean")
imputed <- data
for (i in 1:nrow(imputed)) {
if (is.na(imputed$steps[i])) {
imputed$steps[i] <- avgSteps[which(imputed$interval[i] == avgSteps$interval), ]$x
}
}
imputed$date <- as.Date(imputed$date)
gg <- ggplot(imputed, aes(date, steps))
gg <- gg + geom_bar (stat = "identity",color = "orange", fill = "orange", size = 0.5, position = position_dodge(width = 0.25))
gg <- gg + labs(title = "Histogram",x = "Date",y = "Total number of steps")
print(gg)
filledTotalSteps <- aggregate(imputed$steps, list (Date = imputed$date), FUN = "sum")$x
mean(filledTotalSteps)
median(filledTotalSteps)
```
## Are there differences in activity patterns between weekdays and weekends?
```
dfDay <- imputed
dfDay <- dfDay %>%
mutate(typeOfDay = ifelse(weekdays(dfDay$date) == "Saturday" |
weekdays(dfDay$date) == "Sunday", "Weekend", "Weekday"))
head(dfDay)
dayVsEnd <- dfDay%>%
group_by(interval, typeOfDay) %>%
summarise(avg_steps2 = mean(steps, na.rm = TRUE))
dayVsEndgg <- ggplot(dayVsEnd, aes(x =interval , y=avg_steps2, color=typeOfDay)) +
geom_line() +
labs(title = "Avg Daily Steps", x = "Interval", y = "No. of Steps")
print(dayVsEndgg)
```
knit2html(test.Rmd)
knit2html(PA1.Rmd)
knit2html(PA1.Rmd)
